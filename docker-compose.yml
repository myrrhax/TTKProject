version: '3.8'

networks:
  mynetwork:
    driver: bridge

services:
  gateway-service:
    build:
      context: .
      dockerfile: src/backend/Backend/GatewayService/Dockerfile
    env_file:
      - .env
    ports:
      - "5000:8080"
    depends_on:
      - auth-service
      - image-service
      - information-service
      - tasks-service
    container_name: gateway-service
    networks:
      - mynetwork
    restart: always

  auth-service:
    build:
      context: .
      dockerfile: src/backend/Backend/AuthService/Dockerfile
    env_file:
      - .env
    ports:
      - "5001:8080"
    depends_on:
      - users_db
    container_name: auth-service
    networks:
      - mynetwork
    restart: always

  image-service:
    build:
      context: .
      dockerfile: src/backend/Backend/ImageService/Dockerfile
    env_file:
      - .env
    ports:
      - "5002:8080"
    container_name: image-service
    networks:
      - mynetwork
    depends_on:
      - images_db
    restart: always
    volumes:
      - images_storage:/files

  information-service:
    build:
      context: .
      dockerfile: src/backend/Backend/InformationService/Dockerfile
    env_file:
      - .env
    ports:
      - "5003:8080"
    depends_on:
      - information_db
    container_name: info-service
    networks:
      - mynetwork
    restart: always

  tasks-service:
    build:
      context: .
      dockerfile: src/backend/Backend/TasksService/Dockerfile
    env_file:
      - .env
    ports:
      - "5004:8080"
    depends_on:
      - tasks_db
    container_name: tasks-service
    networks:
      - mynetwork
    restart: always

  users_db:
    image: postgres:latest
    container_name: users_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${UsersPassword}
      - POSTGRES_DB=users_db
    ports:
      - "5432:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  tasks_db:
    image: postgres:latest
    container_name: tasks_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${TasksPassword}
      - POSTGRES_DB=users_db
    ports:
      - "5433:5432"
    volumes:
      - tasks_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  information_db:
    image: postgres:latest
    container_name: information_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${InfoPassword}
      - POSTGRES_DB=users_db
    ports:
      - "5434:5432"
    volumes:
      - info_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  images_db:
    image: postgres:latest
    container_name: images_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${ImagePassword}
      - POSTGRES_DB=images_db
    ports:
      - "5435:5432"
    volumes:
      - images_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

volumes:
  auth_data:
  tasks_data:
  info_data:
  images_data:
  images_storage: